// INCLUDING LIBRARIES
#include <LiquidCrystal_I2C.h> // LCD
#include <Wire.h>              // I2C communication
#include "Zanshin_BME680.h"    // Sensor
#include <DS1307RTC.h>         // Clock

LiquidCrystal_I2C lcd(0x27, 16, 2); // LCD setup
BME680_Class BME680;               // Sensor setup

const char *monthName[12] = {
  "Jan", "Feb", "Mar", "Apr", "May", "Jun",
  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
};

tmElements_t tm; // Clock structure

// Altitude calculation function
float altitude(const int32_t press, const float seaLevel = 1013.25) {
  return 44330.0 * (1.0 - pow(((float)press / 100.0) / seaLevel, 0.1903));
}

void setup() {
  getDate(__DATE__);
  getTime(__TIME__);
  RTC.write(tm);  // Set clock from compile time

#ifdef __AVR_ATmega32U4__
  delay(3000); // Delay for USB initialization
#endif

  Serial.begin(9600);

  // Try to initialize the sensor
  while (!BME680.begin(I2C_STANDARD_MODE)) {
    lcd.setCursor(0, 0);
    lcd.print("Error");
    delay(5000);
  }

  // Sensor setup
  BME680.setOversampling(TemperatureSensor, Oversample16);
  BME680.setOversampling(HumiditySensor, Oversample16);
  BME680.setOversampling(PressureSensor, Oversample16);
  BME680.setIIRFilter(IIR4);
  BME680.setGas(320, 150);

  // LCD setup
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.print("Hello world!");
  delay(1500);
}

void loop() {
  static int32_t temp, humidity, pressure, gas;
  static char buf[16];
  static float alt;
  static uint16_t loopCounter = 0;

  lcd.setCursor(0, 0);
  lcd.clear();
  lcd.print(__DATE__);
  lcd.setCursor(1, 0);
  printTime();
  delay(1000);

  BME680.getSensorData(temp, humidity, pressure, gas);

  if (loopCounter++ != 0) {

    // TEMPERATURE
    sprintf(buf, "%4d %3d.%02d", (loopCounter - 1) % 9999,
            (int8_t)(temp / 100), (uint8_t)(temp % 100));
    lcd.clear();
    lcd.print("T:");
    lcd.print(buf);
    lcd.print("C");
    lcd.setCursor(0, 1);
    printTime();
    delay(1000);

    // HUMIDITY
    sprintf(buf, "%3d.%03d", (int8_t)(humidity / 1000),
            (uint16_t)(humidity % 1000));
    lcd.clear();
    lcd.print("H:");
    lcd.print(buf);
    lcd.print("%");
    lcd.setCursor(0, 1);
    printTime();
    delay(1000);

    // PRESSURE
    sprintf(buf, "%7d.%02d", (int16_t)(pressure / 100),
            (uint8_t)(pressure % 100));
    lcd.clear();
    lcd.print("P:");
    lcd.print(buf);
    lcd.print("Pa");
    lcd.setCursor(0, 1);
    printTime();
    delay(1000);

    // ALTITUDE
    alt = altitude(pressure);
    sprintf(buf, "%5d.%02d", (int16_t)(alt), ((uint8_t)(alt * 100) % 100));
    lcd.clear();
    lcd.print("A:");
    lcd.print(buf);
    lcd.print("m");
    lcd.setCursor(0, 1);
    printTime();
    delay(1000);

    // GAS RESISTANCE
    sprintf(buf, "%4d.%02d", (int16_t)(gas / 100), (uint8_t)(gas % 100));
    lcd.clear();
    lcd.print("R:");
    lcd.print(buf);
    lcd.print("mOhms");
    lcd.setCursor(0, 1);
    printTime();
    delay(1000);
  }
}

void printTime() {
  if (RTC.read(tm)) {
    lcd.print(tm.Hour < 10 ? "0" : ""); lcd.print(tm.Hour);
    lcd.print(":");
    lcd.print(tm.Minute < 10 ? "0" : ""); lcd.print(tm.Minute);
    lcd.print(":");
    lcd.print(tm.Second < 10 ? "0" : ""); lcd.print(tm.Second);
  } else {
    lcd.print(RTC.chipPresent() ? "Stopped" : "Read error");
    delay(5000);
  }
}
